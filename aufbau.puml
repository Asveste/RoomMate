@startuml
'https://plantuml.com/class-diagram

package RoomMate{


package adapter{

    package web{

        class RoomMateController << @Controller >>{
            - BookingService : bookingService
        }

    }

    package db{

        class WorkspaceRepositoryImpl{
            - WorkspaceDao : db
            + Workspace : save(Workspace workspace)
            + void : deleteById(Integer id)
            + Optional<Workspace> : findById(Integer id)
            + Collection<Workspace> : findAll()
        }
        interface WorkspaceDao << extends CrudRepository[Workspace, Integer] >>{
            + WorkspaceDto : save(WorkspaceDto workspaceDto)
            + void : deleteById(Integer id)
            + Optional<WorkspaceDto> : findById(Integer id)
            + Collection<WorkspaceDto> : findAll()
        }
'        class RoomDto << Record >> {
'            - UUID: uuid
'            - @Id Integer : id
'            - String : name
'        }
        class TraitDto << Record >> {
            - String : trait
        }
        class TimespanDto << Record >> {
            - LocalDate : date
            - LocalTime : startTime
            - LocalTime : endTime
        }
        class WorkspaceDto << Record >> {
            - @Id Integer : id
            - UUID : room
            - List<Trait> : traits
            - List<Timespan> : existingReservations
        }

    }

    package api{

        class RoomMateApi << @RestController >>{}

    }

    package security{

        class SecurityConfig{}
        class AppUserService{}

    }

}

package domain{

    package service{

        interface WorkspaceRepository{
            + Workspace : save(Workspace workspace)
            + void : deleteById(Integer id)
            + Optional<Workspace> : findById(Integer id)
            + Collection<Workspace> : findAll()
        }
        class BookingService{
            - WorkspaceRepository : repo
            + List<Workspace> : allWorkspaces()
            + Workspace : workspace(Integer id)
            + List<Workspace> : allWorkspacesByTraits(Collection<Trait> traits)
            + void : addTrait(Integer id, String trait)
            + void : addTraits(Integer id, List<Trait> traits)
            + Set<Workspace> : findByTraits(List<Trait> traits)
        }
        class NotExistentException << extends RuntimeException >> {
            This handles failed id searches
        }
        class InvalidInput << extends RuntimeException >> {
            This handles wrong input
        }

    }

    package model{

'        class Room{
'            - Integer : id
'            - UUID : uuid
'            - String : name
'        }
        class Trait << Record >> {
            - String : trait
        }
        class Timespan << Record >> {
            - LocalDate : date
            - LocalTime : startTime
            - LocalTime : endTime
        }
        class Workspace{
            - Integer : id
            - UUID : room
            - List<Trait> : traits
            - List<Timespan> : existingReservations
            + boolean : isValid(Timespan timespan)
            + boolean : isOverlap(Timespan timespan)
            + void : addTrait(Trait trait)
            + void : addReservation(Timespan timespan)
            + void : roomDtoTransfer(RoomDto dto)
            + void : traitDtoTransfer(TraitDto dto)
            + void : timespanDtoTransfer(TimespanDto dto)
            + void : workspaceDtoTransfer(WorkspaceDto dto)
        }

    }

}

'Adapter - api
RoomMateApi --> BookingService

'Adapter - web
RoomMateController --> BookingService

'Adapter - db
WorkspaceRepositoryImpl ..> WorkspaceRepository
WorkspaceRepositoryImpl --> WorkspaceDao

WorkspaceDto --> TraitDto
WorkspaceDto --> TimespanDto

'RoomDto --> WorkspaceRepositoryImpl
TraitDto --> WorkspaceRepositoryImpl
TimespanDto --> WorkspaceRepositoryImpl
WorkspaceDto --> WorkspaceRepositoryImpl

'Domain - Application Service
BookingService --> WorkspaceRepository
BookingService --> NotExistentException
BookingService --> InvalidInput

'Domain - Model
'Workspace --> Room
Workspace --> Trait
Workspace --> Timespan

}

@enduml