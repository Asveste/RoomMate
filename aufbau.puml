@startuml
'https://plantuml.com/class-diagram

package RoomMate{


package adapter{

    package web{

        class RoomMateController << @Controller >> {
            - BookingService : service
        }

    }

    package db{

        class WorkspaceRepositoryImpl <<@Repository>> {
            - WorkspaceDao : db
            - Trait : convertTrait(TraitDto traitDto)
            - Timespan : convertTimespan(TimespanDto timespanDto)
            - Workspace : convertWorkspace(WorkspaceDto workspaceDto)
            - TraitDto : extractTrait(Trait trait)
            - TimespanDto : extractTimespan(Timespan timespan)
            --
            + Workspace : save(Workspace workspace)
            + void : deleteById(Integer id)
            + Optional<Workspace> : findById(Integer id)
            + Collection<Workspace> : findAll()
        }
        interface WorkspaceDao << extends CrudRepository[Workspace, Integer] >>{
            + WorkspaceDto : save(WorkspaceDto workspaceDto)
            + void : deleteById(Integer id)
            + Optional<WorkspaceDto> : findById(Integer id)
            + Collection<WorkspaceDto> : findAll()
        }
'        class RoomDto << Record >> {
'            - UUID: uuid
'            - @Id Integer : id
'            - String : name
'        }
        class TraitDto << Record >> {
            + String : trait
        }
        class TimespanDto << Record >> {
            + LocalDate : date
            + LocalTime : startTime
            + LocalTime : endTime
            + @Id Integer : timespanId
        }
        class WorkspaceDto << Record >> {
            + @Id Integer : id
            + UUID : room
            + List<Trait> : traits
            + List<Timespan> : existingReservations
        }

    }

    package api{

        class Access << Record >> {
            + String : key
            + String : room
        }
        class AccessController << @RestController >> {
            - << Record >> Key :
                - String : id
                - String owner
            --
            - << Record >> Room :
                - String : id
                - String raum
        }

    }

    package security{

        class SecurityConfig{
            + SecurityFilterChain : config(HttpSecurity chainBuilder) throws Exception
        }
        class MethodSecurityConfig << @Configuration @EnableMethodSecurity(securedEnabled = true >> {}
        class AppUserService << @Configuration | implements OAuth2UserService >> {
            + OAuth2User : loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException
        }

    }

}

package domain{

    package service{

        interface WorkspaceRepository{
            + Workspace : save(Workspace workspace)
            + void : deleteById(Integer id)
            + Optional<Workspace> : findById(Integer id)
            + Collection<Workspace> : findAll()
        }
        class BookingService <<@Service>> {
            - WorkspaceRepository : repo
            + List<Workspace> : allWorkspaces()
            + Workspace : workspace(Integer id)
            + List<Workspace> : allWorkspacesByTraits(Collection<Trait> traits)
            + List<Workspace> : allWorkspacesByTimespan(Collection<Timespan> timespans)
            + List<Trait> : allTraitsFromWorkspace(Integer id)
            + List<Trait> : allTraitsFromWorkspaces(List<Workspace> workspaces)
            + List<Timespan> : allReservationsFromWorkspace(Integer id)
            + Integer : addWorkspace(UUID room)
            + void : addTraitAdmin(Integer id, String trait)
            + void : addTraits(Integer id, List<String> traits)
            + void : addReservation(Integer id, Timespan timespan)
            + void : addRecurringReservation(Integer id, Timespan timespan)
            + void : deleteWorkspaceAdmin(Integer id)
            + void : deleteTraitAdmin(Integer id, String trait)
            + void : lockWorkspaceAdmin(Integer id, Timespan timespan)
            + void : cancelReservationAdmin(Integer id, Timespan timespan)
        }
        class NotExistentException << extends RuntimeException >> {
            This handles failed id searches
        }
        class InvalidInput << extends RuntimeException >> {
            This handles wrong input
        }

    }

    package model{

'        class Room{
'            - Integer : id
'            - UUID : uuid
'            - String : name
'        }
        class Trait << Record >> {
            + String : trait
        }
        class Timespan << Record >> {
            + LocalDate : date
            + LocalTime : startTime
            + LocalTime : endTime
            + Integer : timespanId
        }
        class Workspace{
            + Integer : id
            + UUID : room
            + List<Trait> : traits
            + List<Timespan> : existingReservations
            + boolean : isOverlap(Timespan newReservation)
            + boolean : isValid(Timespan newReservation)
            + void : addTrait(Trait trait)
            + void : addReservation(Timespan timespan)
            + void : removeTrait(Trait traitToRemove)
            + void : removeReservation(Timespan timespan)
            + void : forceRemoveReservation(Timespan timespan)
            + void : overwriteReservation(Timespan timespan)
            - boolean : isOverlappingForOverwriting(Timespan existing, Timespan newTimespan)
'            + void : roomDtoTransfer(RoomDto dto)
'            + void : traitDtoTransfer(TraitDto dto)
'            + void : timespanDtoTransfer(TimespanDto dto)
'            + void : workspaceDtoTransfer(WorkspaceDto dto)
        }

    }

}

'Adapter - api
AccessController --> BookingService
AccessController --> Access


'Adapter - web
RoomMateController --> BookingService


'Adapter - db
WorkspaceRepositoryImpl ..> WorkspaceRepository
WorkspaceRepositoryImpl --> WorkspaceDao

WorkspaceDto --> TraitDto
WorkspaceDto --> TimespanDto

'RoomDto --> WorkspaceRepositoryImpl
TraitDto --> WorkspaceRepositoryImpl
TimespanDto --> WorkspaceRepositoryImpl
WorkspaceDto --> WorkspaceRepositoryImpl


'Domain - Application Service
BookingService --> WorkspaceRepository
BookingService --> NotExistentException
BookingService --> InvalidInput


'Domain - Model
'Workspace --> Room
Workspace --> Trait
Workspace --> Timespan

}

@enduml